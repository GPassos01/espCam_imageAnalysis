name: Auto Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
    
    - name: Generate Release Notes
      id: notes
      run: |
        # Extract version from CHANGELOG.md
        VERSION="${{ steps.version.outputs.VERSION }}"
        
        # Create release notes
        cat > release_notes.md << EOF
        # ESP32-CAM Flood Monitor $VERSION
        
        ## Sistema de Monitoramento Inteligente para Detec√ß√£o de Mudan√ßas Fluviais
        
        ### Principais Funcionalidades
        - **Sistema ESP32-CAM completo** com an√°lise inteligente RGB565
        - **Algoritmo de compara√ß√£o** por blocos 32x32 pixels
        - **Monitor cient√≠fico Python** com argumentos CLI
        - **Duas vers√µes**: INTELLIGENT (economia de dados) e SIMPLE (baseline)
        - **Comunica√ß√£o MQTT robusta** com reconex√£o autom√°tica
        - **Documenta√ß√£o profissional** completa
        
        ### Melhorias T√©cnicas
        - Vers√£o INTELLIGENT recriada e otimizada
        - Estrutura de projeto profissional
        - Sistema de backup autom√°tico
        - Scripts de teste para compara√ß√£o de vers√µes
        - Workflows GitHub Actions automatizados
        
        ### Status dos Testes
        - ‚úÖ **Core System**: Firmware + Servidor testados e funcionais
        - üöß **Tools**: Scripts em beta para pr√≥ximas vers√µes
        
        ### Instala√ß√£o R√°pida
        \`\`\`bash
        # Clone do reposit√≥rio
        git clone https://github.com/GPassos01/espCam_imageAnalysis.git
        cd espCam_imageAnalysis
        
        # Siga README.md para configura√ß√£o completa
        \`\`\`
        
        ### Configura√ß√£o R√°pida
        1. **ESP32**: Configure firmware conforme documenta√ß√£o
        2. **Servidor**: Configure Python + MQTT
        3. **Monitor**: Execute \`python mqtt_data_collector.py\`
        
        ### Documenta√ß√£o Completa
        - [README.md](README.md) - Guia completo
        - [CHANGELOG.md](CHANGELOG.md) - Hist√≥rico de mudan√ßas
        - [CONTRIBUTING.md](CONTRIBUTING.md) - Como contribuir
        
        ### Pr√≥ximo Release
        v1.1.0 com ferramentas completas
        
        ---
        **Por Gabriel Passos - IGCE/UNESP**  
        **Sistema de Monitoramento de Enchentes - Projeto Cient√≠fico**
        EOF
        
        # Store release notes for later use
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Create Release Package
      run: |
        # Create complete release package
        mkdir -p release-package
        
        # Copy server code
        cp -r src/server/ release-package/
        rm -rf release-package/server/__pycache__ || true
        rm -rf release-package/server/venv || true
        
        # Copy essential documentation
        cp README.md CHANGELOG.md LICENSE release-package/
        cp CONTRIBUTING.md CODE_OF_CONDUCT.md release-package/
        
        # Create installation script
        cat > release-package/install.sh << 'INSTALL_EOF'
        #!/bin/bash
        # ESP32-CAM Flood Monitor Installation Script
        # Vers√£o: ${{ steps.version.outputs.VERSION }}
        # Por Gabriel Passos - IGCE/UNESP
        
        set -e
        
        echo "ESP32-CAM Flood Monitor Installation"
        echo "Vers√£o: ${{ steps.version.outputs.VERSION }}"
        echo "========================================="
        
        # Check prerequisites
        echo "Verificando pr√©-requisitos..."
        
        if ! command -v python3 &> /dev/null; then
            echo "Python 3 n√£o encontrado. Instale Python 3.9+"
            exit 1
        fi
        
        PYTHON_VERSION=$(python3 --version | cut -d' ' -f2 | cut -d'.' -f1,2)
        echo "Python $PYTHON_VERSION encontrado"
        
        # Install Python dependencies
        echo "Instalando depend√™ncias Python..."
        cd server
        python3 -m venv venv
        source venv/bin/activate
        pip install paho-mqtt matplotlib numpy scipy pillow
        
        echo "Instala√ß√£o conclu√≠da!"
        echo ""
        echo "Pr√≥ximos passos:"
        echo "1. Configure seu ESP32-CAM conforme documenta√ß√£o"
        echo "2. Edite configura√ß√µes MQTT"
        echo "3. Execute: cd server && source venv/bin/activate && python mqtt_data_collector.py"
        echo ""
        echo "Consulte README.md para instru√ß√µes detalhadas"
        INSTALL_EOF
        chmod +x release-package/install.sh
        
        # Create requirements.txt for server
        cat > release-package/server/requirements.txt << 'REQ_EOF'
        paho-mqtt>=1.6.0
        matplotlib>=3.5.0
        numpy>=1.21.0
        scipy>=1.7.0
        pillow>=8.3.0
        REQ_EOF
        
        # Create final archive
        tar -czf esp32-cam-monitor-${{ steps.version.outputs.VERSION }}.tar.gz release-package/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: ESP32-CAM Flood Monitor ${{ steps.version.outputs.VERSION }}
        body: ${{ steps.notes.outputs.RELEASE_NOTES }}
        files: |
          esp32-cam-monitor-${{ steps.version.outputs.VERSION }}.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Release Summary
      run: |
        echo "Release ${{ steps.version.outputs.VERSION }} criado com sucesso!"
        echo "Assets criados:"
        echo "  - esp32-cam-monitor-${{ steps.version.outputs.VERSION }}.tar.gz (pacote completo)"
        echo ""
        echo "Pr√≥ximos passos:"
        echo "1. Download do arquivo .tar.gz"
        echo "2. Extra√ß√£o: tar -xzf esp32-cam-monitor-${{ steps.version.outputs.VERSION }}.tar.gz"
        echo "3. Execu√ß√£o: ./install.sh" 